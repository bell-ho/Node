<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-test</artifactId>
    <version>${org.springframework-version}</version>
</dependency>

XML을 이용하는 의존성 주입 설정 
스프링은 클래스에서 객제를 생성하고 객체들의 의존성에 대한 처리 작업까지 
내부에서 모든 것이 처리됩니다. 스프링에서 관리되는 객제를 흔히 빈(Bean)，이라고 하고， 
이에 대한설정은 XML과 Java를이용해서 처리할수있습니다. 기존의 시스템은 아직까지는 XML 방식을 선호하지만，
최근 몇 년 동안 스프령과 관련된 자료를 검색해보면 Java를 이용하는 설정도 많이 사용되고 있습니다. 
STS의 ’Spring Legacy Project’의 경우 기본적으로 XML을 이용해서 스프링에서 관리해야 하는 객체들을 처리합니다. 
프로젝트의 src 폴더 내에 'root-context.xml'은 스프링 프례임워크에서 관리해야 하는 
객체 (이러한 객제를 스프링에서는 빈(Bean)이라고 표현합니다) 를 설정하는 설정 파일입 니다.

<context:component-scan base-package="org.zerock.sample">
</context:component-scan>

스프링이 동작하면서 생기는 일

스프링 프레임워크가 시작되면 먼저 스프링이 사용하는 메모리 영역을 만들게 되는데 이를 컨텍스트 (Context)라고 합니다
스프링에서는 ApplicationContext라는 이름의 객체가 만들어집니다. 
스프링은 자신이 객체를 생성하고 관리해야 하는 객체들에 대한 설정이 필요합니다. 이에 대한 설정 이 root-contexl.xml 파일입니다. 
root-conlexl.xml에 설정되어 있는 (context: component--scan) 태그의 내용을 통해서 'org.zerock. sample' 패키지를 스캔(scan)하기 시작합니다
해당 패키지에 있는 클래스들 중에서 스프링이 사용하는 @Component라는 어노테이션이 존재하는 클래스의 인스턴스를 생성합니다. 
Restaurant 객체는 Chef 객체가 필요하다는 어노테이션(@Autowired) 설정이 있으므로， 스프링은 Chef 객체의 레퍼런스를 Restauranl 객체에 주입합니다.

테스트 코드는 우선 현재 테스트 코드가 스프링을 설행히는 역할을 할 것이라는 것을 @Runwith 어노태이션으로 표시합니다

 가장 중요한 설정은 @ContextConfiguration 어노테이션과 속성값인 문자열 설정입니다.
 @ContextConfiguration은 지정된 클래스나 문자열을 이용해서 필요한 객체들을 스프링 내에 객체로 등록하게 됩니다
 (흔히 스프링의 빈으로 등록된다고 표현하곤 합니다) @ContextConfiguration에 사용용히는 문자열은 ’classpath:’나 'file:’을 이용할 수 있으므로， 
 이클립스에서 지동으로 생성된 root-context.xml의 경로를 지정할 수 있습니다. 

@Log4j는 Lombok을 이용해서 로그를 기록하는 Logger를 변수로 생성합니다. 
별도의 Logger 객체의 선언이 없이도 Log4j 라이브러리와 설정이 존재한다면 바로 사용할 수있습니다.
Spring Legacy Project로 생성하는 경우 기본으로 Log4j와 해당 설정이 완료되는 상태이기 때문에 별도의 처리 없이 사용가능

@Autowired는 해당 인스턴스 변수가 스프링으로부터 자동으로 주입해 달라는 표시이고，
스프링은 정상적으로 주입이 가능하다면 obj 변수에 Restaurant 타입의 객체를 주입하게 됩니다.

 @Test는 JUnit에서 테스트 대상을 표시하는 어노테이션입니다.
해당 메서드를 선택하고 JUnit Test 기능을 실행합니다.
assertNotNull( )은 restaurant 변수가 null이 아니어야만 테스트가 성공한다는 것을 의미합니다.
